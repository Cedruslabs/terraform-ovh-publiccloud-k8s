#!/bin/bash -e
if [ "$MASTER_MODE" == "0" ] && [ "$WORKER_MODE" == "0" ]; then
    echo "nothing to be done" >&2
fi

# Do not run if init has already been done
if [ -f /opt/k8s/init.done ]; then
   echo "init already done" >&2
   exit 0
fi

# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/etcd/bin/etcdctl --cacert /opt/etcd/certs/ca.pem --cert /opt/etcd/certs/cert.pem --key /opt/etcd/certs/cert-key.pem --endpoints $ETCD_ENDPOINTS"

# Acquire lock on kubeadm-init script if initializing a new master
# Otherwise, run the script without locking
echo "initializing the node" >&2
if [ "$MASTER_MODE" == "1" ]; then
    # run kubeadm on master nodes with a lock as the first node will gen
    # the cluster pki certs
    $ETCDCTL_COMMAND lock "$LOCK" /opt/k8s/kubeadm-init

    # Untaint node if needed
    if [ "$WORKER_MODE" == "1" ]; then
        echo "untainting $(hostname) master node" >&2
        /opt/k8s/bin/kubectl --kubeconfig=/etc/kubernetes/admin.conf taint nodes $(hostname) node-role.kubernetes.io/master-
    fi

    # generate cni config
    if [ ! -d /etc/kubernetes/cni ]; then
        mkdir -p /etc/kubernetes/cni
    fi
    /opt/k8s/cni-rbac.yaml.sh > /etc/kubernetes/cni/cni-rbac.yaml
    /opt/k8s/cni-manifest.yaml.sh > /etc/kubernetes/cni/cni-manifest.yaml

    # Apply CNI manifests if master
    /opt/k8s/bin/kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f /etc/kubernetes/cni/cni-rbac.yaml
    /opt/k8s/bin/kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f /etc/kubernetes/cni/cni-manifest.yaml

else
    exec /opt/k8s/kubeadm-init
fi

touch /opt/k8s/init.done
