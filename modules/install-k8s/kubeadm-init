#!/bin/bash -e
if [ "$MASTER_MODE" == "0" ] && [ "$WORKER_MODE" == "0" ]; then
    echo "nothing to be done" >&2
fi

# required as kubeadm will make use of binaries such as kubelet
export PATH=$PATH:/opt/k8s/bin

# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/etcd/bin/etcdctl --cacert /opt/etcd/certs/ca.pem --cert /opt/etcd/certs/cert.pem --key /opt/etcd/certs/cert-key.pem --endpoints $ETCD_ENDPOINTS"

# Try to get PKI from etcd, if already generated by a previous run of kubeadm
PKI=$($ETCDCTL_COMMAND get --print-value-only "$PKI_KEY")

# Node is a master
if [ "$MASTER_MODE" == "1" ]; then
    # generate kubeadm config
    if [ ! -d /etc/kubernetes/kubeadm ]; then
        mkdir -p /etc/kubernetes/kubeadm
    fi
    /opt/k8s/kubeadm_config.yaml.sh > /etc/kubernetes/kubeadm/config.yaml

  # Either we need to generate the PKI and store it into the etcd
  # or PKI is already generated and we need to get it from the etcd
  if [ -z "$PKI" ]; then
      echo "First master, generating PKI" >&2
      /opt/k8s/bin/kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml
      (cd /etc/kubernetes && $ETCDCTL_COMMAND put "$PKI_KEY" "$(tar -cf - ./pki | base64)")
  else
      echo "PKI already in etcd" >&2
    (cd /etc/kubernetes && echo -e "$PKI" | base64 -d | tar -xf -)
    /opt/k8s/bin/kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml
  fi

  # Push generated bootstrap token into etcd
  # so workers can get it to register
  TOKEN=$(/opt/k8s/bin/kubeadm token list | tail -n1 | awk '{print $1}')
  $ETCDCTL_COMMAND put $BOOTSTRAP_TOKEN_KEY "$TOKEN"
fi

# Node is a worker only
if [ "$MASTER_MODE" == "0" ] && [ "$WORKER_MODE" == "1" ]; then
    if [ -z "$PKI" ]; then
        echo "PKI has not been generated yet, can't join the cluster for now" >&2
        exit 1
    fi

    # Get bootstrap token from etcd
    TOKEN=$($ETCDCTL_COMMAND get --print-value-only $BOOTSTRAP_TOKEN_KEY)
    if [ -z "$TOKEN" ]; then
        echo "No bootstrap token found into etcd" >&2
        exit 1
    fi

    # Join the cluster
    echo "Joining the cluster on endpoint $API_ENDPOINT with token $TOKEN" >&2
    /opt/k8s/bin/kubeadm join --discovery-token-unsafe-skip-ca-verification --token $TOKEN $API_ENDPOINT
fi
