#!/bin/bash -e

readonly BOOTSTRAP_TOKEN_KEY="k8s-boostrap-token"
readonly PKI_KEY="k8s-pki"

# Prepare etcdctl command
export ETCDCTL_API=3
ETCDCTL_COMMAND="/opt/etcd/bin/etcdctl --cacert /opt/etcd/certs/ca.pem --cert /opt/etcd/certs/cert.pem --key /opt/etcd/certs/cert-key.pem --endpoints $ETCD_ENDPOINTS "

# Expose k8s tools path for kubeadm
PATH=$PATH:/opt/k8s/bin

# Try to get PKI from etcd, if already generated by a previous run of kubeadm
PKI=$($ETCDCTL_COMMAND get --print-value-only $PKI_KEY)

# Node is a master
if [ "$MASTER_MODE" -eq "1" ]
then
  # Either we need to generate the PKI and store it into the etcd
  # or PKI is already generated and we need to get it from the etcd
  if [[ -z "$PKI" ]];
  then
    echo "First master, generating PKI"
    /opt/k8s/bin/kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml
    if [[ "$?" -ne "0" ]]
    then
      echo "Failed to initialize with kubeadm..."
      exit 1
    fi

    (cd /etc/kubernetes && $ETCDCTL_COMMAND put $PKI_KEY "$(tar -cf - ./pki | base64)")
  else
    echo "PKI already in etcd"
    (cd /etc/kubernetes && echo -e "$PKI" | base64 -d | tar -xf -)
    /opt/k8s/bin/kubeadm init --config=/etc/kubernetes/kubeadm/config.yaml
  fi

  # Push generated bootstrap token into etcd
  # so workers can get it to register
  TOKEN=$(kubeadm token list | tail -n1 | awk '{print $1}')
  $ETCDCTL_COMMAND put $BOOTSTRAP_TOKEN_KEY "$TOKEN"
else
  # Node is a worker-node only
  if [ "$WORKER_MODE" -eq "1" ]
  then
    if [ -z "$PKI" ]
    then
      echo "PKI has not been generated yet, can't join the cluster for now"
      exit 1
    fi

    # Get bootstrap token from etcd
    TOKEN=$($ETCDCTL_COMMAND get --print-value-only $BOOTSTRAP_TOKEN_KEY)
    if [ -z "$TOKEN" ]
    then
      echo "No bootstrap token found into etcd"
      exit 2
    fi

    # Join the cluster
    echo "Joining the cluster on endpoint $API_ENDPOINT with token $TOKEN"
    kubeadm join --discovery-token-unsafe-skip-ca-verification --token $TOKEN $API_ENDPOINT
  fi
fi
